//single inheritance
import java.util.*;
class A{
    int add(int a, int b){
        return a+b;
    }
}
class B extends A{
    int sub(int a, int b){
        return a-b;
    }
}
public class Main
{
	public static void main(String[] args) {
		int a,b;
		Scanner q= new Scanner(System.in);
		a=q.nextInt();
		b=q.nextInt();
		B obj= new B();
		System.out.println(obj.add(a,b));
		System.out.println(obj.sub(a,b));
	}
}

//multilevel inheritance
import java.util.*;
class A{
    int add(int a, int b){
        return a+b;
    }
}
class B extends A{
    int sub(int a, int b){
        return a-b;
    }
}
class C extends B{
    int mul(int a, int b){
        return a*b;
    }
}
public class Main
{
	public static void main(String[] args) {
		int a,b;
		Scanner q= new Scanner(System.in);
		a=q.nextInt();
		b=q.nextInt();
		C obj= new C();
		System.out.println(obj.add(a,b));
		System.out.println(obj.sub(a,b));
		System.out.println(obj.mul(a,b));
	}
}

//hierarchial inheritance
import java.util.*;
class A{
    int add(int a, int b){
        return a+b;
    }
}
class B extends A{
    int sub(int a, int b){
        return a-b;
    }
}
class C extends A{
    int mul(int a, int b){
        return a*b;
    }
}

public class Main
{
	public static void main(String[] args) {
		int a,b;
		Scanner q= new Scanner(System.in);
		a=q.nextInt();
		b=q.nextInt();
		B obj= new B();
		C web= new C();
		System.out.println(obj.add(a,b));
		System.out.println(obj.sub(a,b));
		System.out.println(web.add(a,b));
		System.out.println(web.mul(a,b));
	}
}

//multiple inheritance
import java.util.*;
class A{
    int add(int a, int b){
        return a+b;
    }
}
class B {
    int sub(int a, int b){
        return a-b;
    }
}
class C extends A,B{
    int mul(int a, int b){
        return a*b;
    }
}

public class Main
{
	public static void main(String[] args) {
		int a,b;
		Scanner q= new Scanner(System.in);
		a=q.nextInt();
		b=q.nextInt();
		B obj= new B();
		C web= new C();
		System.out.println(obj.add(a,b));
		System.out.println(obj.sub(a,b));
		System.out.println(web.add(a,b));
		System.out.println(web.mul(a,b));
	}
}

//interface
import java.util.*;
interface A{
     int add(int a, int b);
}
class B implements A{
    public int add(int a, int b){
      return a+b;
    }
}
public class Main
{
	public static void main(String[] args) {
	  Scanner s= new Scanner(System.in);
	  int a=s.nextInt();
	  int b=s.nextInt();
	  B z= new B();
	 System.out.println(z.add(a,b));
	}
}

//polymorphism-method overriding
import java.util.*;
class A{
    public int add(int a,int b)
    {
        return a+b;
    }
}
class B extends A{
     @Override
    public int add(int a, int b){
        int c=a-b;
        return c;
    }
}
public class Main
{
	public static void main(String[] args) {
	  Scanner s= new Scanner(System.in);
	  int a=s.nextInt();
	  int b=s.nextInt();
	    A z= new B();  //access a parent class with parent class;child class with parent class;child class with child class
	 System.out.println(z.add(a,b));//but a parent class cannot be accessed by a parent class;
	 A d= new A();
	 System.out.println(d.add(a,b));
	}
}

//polymorphism-method overloading.
import java.util.*;
class A{
    public int add(int a,int b)
    {
        return a+b;
    }
}
class B extends A{
    public int add(int a, int b,int c){
        return a+b+c;
    }
}
public class Main
{
	public static void main(String[] args) {
	  Scanner s= new Scanner(System.in);
	  int a=s.nextInt();
	  int b=s.nextInt();
	  int c=s.nextInt();
	    B z= new B();  //in overloading child class cannot be accessed by a parent class.
	 System.out.println(z.add(a,b,c));//parent class also cannot be accessed by a child class.
	 A d= new A();//Both parent can be accessed only by their own.
	 System.out.println(d.add(a,b));
	}
}
